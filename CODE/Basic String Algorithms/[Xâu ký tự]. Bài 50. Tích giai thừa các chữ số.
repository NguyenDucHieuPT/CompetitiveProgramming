#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define BIT(x, i) ((x) & (1 << (i)))
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define file(name)  if (fopen (name".inp", "r") ) { freopen (name".inp", "r", stdin); freopen (name".out", "w", stdout); } else freopen (name".inp", "w", stdin);
#define FL(i,l,r) for (int i=l;i<r;i++)
#define FE(i,l,r) for (int i=l;i<=r;i++)
#define FR(i,r,l) for (int i=r-1;i>=l;i--)
#define FT(x,a) for (auto &x: a)
#define ALL(v) (v).begin(), (v).end()
#define sz(x) (int)(x).size()
#define HaCam int main(void)

using ll = long long;
using ld = long double;
using st = string;
using pii = pair<int, int>;
using vi = vector<int>;

//author Hieu Soc
//school THPT Hung Hoa

const int INF = 1e9 + 1;
const ll INFF = 1e18 + 1;
const int MaxN = 1e6 + 1;
const ll MOD = 1e9 + 7;

namespace solve
{
	vector<int> PrimeFactor[10];
	int factorial[10], k = 0;
	void processing()
	{
		factorial[0] = 1;
		FE(i, 1, 9)
			factorial[i] = i * factorial[i - 1];
	}
	void prime_factor(int i)
	{
		if (i == 2 || i == 3 || i == 5 || i == 7)
		{
			PrimeFactor[i] = {i};
			k = i;
			return;
		}
		int n = factorial[i];
		for(int j = k; j > 1; j--)
			while(n % factorial[j] == 0)
			{
				n /= factorial[j];
				PrimeFactor[i].push_back(j);
			}
	}

	vector<int> Add2Vector(vector<int> a, vector<int> b)
	{
		FL(i, 0, sz(b))
			a.push_back(b[i]);
		return a;
	}
	void process(void)
	{
		processing();
		FE(i, 2, 9)
			prime_factor(i);
		vector<int> res;
		string str;
		cin >> str;
		FL(i, 0, sz(str))
			res = Add2Vector(res , PrimeFactor[str[i] - '0']);
		sort(res.begin(), res.end(), greater<int>());
		FL(i, 0, sz(res))
			cout << res[i];
	}	
}


HaCam
{
    fastio;
    file("B");
    solve::process();

    
    return 0;
}