#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define BIT(x, i) ((x) & (1 << (i)))
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define file(name)  if (fopen (name".inp", "r") ) { freopen (name".inp", "r", stdin); freopen (name".out", "w", stdout); } else freopen (name".inp", "w", stdin);
#define FL(i,l,r) for (int i=l;i<r;i++)
#define FE(i,l,r) for (int i=l;i<=r;i++)
#define FR(i,r,l) for (int i=r-1;i>=l;i--)
#define FT(x,a) for (auto &x: a)
#define ALL(v) (v).begin(), (v).end()
#define sz(x) (int)(x).size()
#define HaCam int main(void)

using ll = long long;
using ld = long double;
using st = string;
using pii = pair<int, int>;
using vi = vector<int>;

//author Hieu Soc
//school THPT Hung Hoa

const int INF = 1e9 + 1;
const ll INFF = 1e18 + 1;
const int MaxN = 1e6 + 1;
const int MOD = 1e9 + 7;

namespace solve
{
	void process(void)
	{
		int m, s;
		cin >> m >> s;
		int Max = m * 9, Min = 1;
		if (s > Max || s < Min)
		{
			cout << "NOT FOUND";
			return;
		}
		string result_max, result_min;
		FE(i, 1, m)
		{
			result_max.push_back((char) 48 + (s >= 9 ? 9 : s));
			s = max(s - 9, 0);
		}
		result_min = result_max;
		reverse(result_min.begin(), result_min.end());
		if (result_min[0] == '0')
		{
			result_min[0] = '1';
			for (int i = 1; i < m; i++)
				if (result_min[i] != '0')
				{
					result_min[i] = -1 + (int) result_min[i];
					break;
				}
		}
		cout << result_min << endl << result_max;
	}
}


HaCam
{
    fastio;
    file("B");
    solve::process();

    
    return 0;
}