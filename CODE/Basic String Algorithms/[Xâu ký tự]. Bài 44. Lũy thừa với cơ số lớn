#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define BIT(x, i) ((x) & (1 << (i)))
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define file(name)  if (fopen (name".inp", "r") ) { freopen (name".inp", "r", stdin); freopen (name".out", "w", stdout); } else freopen (name".inp", "w", stdin);
#define FL(i,l,r) for (int i=l;i<r;i++)
#define FE(i,l,r) for (int i=l;i<=r;i++)
#define FR(i,r,l) for (int i=r-1;i>=l;i--)
#define FT(x,a) for (auto &x: a)
#define ALL(v) (v).begin(), (v).end()
#define sz(x) (int)(x).size()
#define HaCam int main(void)

using ll = long long;
using ld = long double;
using st = string;
using pii = pair<int, int>;
using vi = vector<int>;

//author Hieu Soc
//school THPT Hung Hoa

const int INF = 1e9 + 1;
const ll INFF = 1e18 + 1;
const int MaxN = 1e6 + 1;
const ll MOD = 1e9 + 7;

namespace solve
{
	ll mod(string n, ll m)
	{

		ll ResMod = 0;
		FL(i, 0, sz(n))
			ResMod = (ResMod * (10 % m) + (n[i] - '0') % m) % m;

		if (ResMod < 0) ResMod += m;
		return ResMod;
	}
	ll binpow(ll n, ll m)
	{
		ll res = 1;
		while(m != 0)
		{
			if (m % 2)
				res = (res * (n % MOD)) % MOD;
			m /= 2;
			n = ((n % MOD) * (n % MOD)) % MOD;
		}
		return res;
	}
	void process(void)
	{
		string n;
		ll m;
		cin >> n >> m;
		cout << binpow(mod(n, MOD), m);
	}
	
}


HaCam
{
    fastio;
    file("B");
    solve::process();

    
    return 0;
}