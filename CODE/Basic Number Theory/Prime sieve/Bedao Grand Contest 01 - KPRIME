//https://oj.vnoi.info/problem/bedao_g01_kprime
namespace solve
{
	const int MAXN = 1e7 + 1;	
	int n, k;
	void enter()
	{
		cin >> n >> k;
	}
	vector <bool> IsPrime(MAXN, 1);
	void sieve_prime()
	{
		IsPrime[1] = IsPrime[0] = 0;
		FE(i, 2, sqrt(n))
			if(IsPrime[i])
				for(int j = i * 2; j <= n; j += i)
					IsPrime[j] = 0;
	}
	void process(void)
	{
		enter();
		sieve_prime();
		ll res = 0;
		int curr = 0, j;
		FE(i, 2, n)
		{
			if (IsPrime[i]) curr++;
			j = i;
			if (curr == k)
				break;
		}
		if (curr < k)
		{
			cout << 0;
			return;
		}
		FE(i, 1, n)
			if (curr == k)
			{
				res += (ll) n - j + 1;
				//cout << i << " " << j << endl;
				if (IsPrime[i])
				{
					curr--;
					FE(l, j + 1, n)
						if (IsPrime[l])
						{
							j = l;
							curr++;
							break;
						}
				}
			}
		cout << res;
	}
}
